{
    "interface": {
        "description": "Create an interface",
        "prefix": "interface",
        "body": [
            "<?php",
            "namespace Chevere\\Interfaces\\\\${TM_DIRECTORY/(^.+\\/(.*)$)/$2/};",
            "",
            "interface $TM_FILENAME_BASE",
            "{",
            "\t$0",
            "}"
        ]
    },
    "test": {
        "description": "Create a test",
        "prefix": "test",
        "body": [
            "<?php",
            "namespace Chevere\\Tests\\\\${TM_DIRECTORY/(^.+\\/(.*)$)/$2/};",
            "",
            "use PHPUnit\\Framework\\TestCase;",
            "",
            "final class $TM_FILENAME_BASE extends TestCase",
            "{",
            "\t$0",
            "}"
        ]
    },
    "test-method": {
        "description": "Create a test method",
        "prefix": "test-method",
        "body": [
            "public function test${1:Name}(): void",
            "{",
            "\t$0",
            "}"
        ]
    },
    "immutable-method": {
        "description": "Create a immutable method",
        "prefix": "immutable-method",
        "body": [
            "private ${2|int,string,bool,array,object,resource|} \\$${3:argument};",
            "",
            "public function with${1:Name}(${2|int,string,bool,array,object,resource|} \\$${3:argument}): ${4:self}",
            "{",
            "\t\\$new = clone \\$this;",
            "\t\\$new->${3:argument} = \\$${3:argument};",
            "",
            "\treturn \\$new;",
            "}"
        ]
    },
    "component": {
        "description": "Create a component",
        "prefix": "component",
        "body": [
            "<?php",
            "namespace Chevere\\Components\\\\${TM_DIRECTORY/(^.+\\/(.*)$)/$2/};",
            "",
            "final class $TM_FILENAME_BASE",
            "{",
            "\t$0",
            "}"
        ]
    },
    "exception": {
        "description": "Create an exception",
        "prefix": "exception",
        "body": [
            "<?php",
            "namespace Chevere\\Exceptions\\\\${TM_DIRECTORY/(^.+\\/(.*)$)/$2/};",
            "",
            "use Chevere\\Exceptions\\Core\\Exception;",
            "",
            "/**",
            " * Exception thrown when ${1:description}.",
            " */",
            "final class $TM_FILENAME_BASE extends Exception",
            "{",
            "}"
        ]
    },
    "trait": {
        "description": "Create a component trait",
        "prefix": "trait",
        "body": [
            "<?php",
            "namespace Chevere\\Components\\\\${TM_DIRECTORY/(^.+\\/(.*)$)/$2/}\\\\Traits;",
            "",
            "trait $TM_FILENAME_BASE",
            "{",
            "\t$0",
            "}"
        ]
    },
    "controller": {
        "description": "Create a controller",
        "prefix": "controller",
        "body": [
            "<?php",
            "",
            "use Chevere\\Components\\Controller\\Controller;",
            "use Chevere\\Components\\Controller\\ControllerParameters;",
            "use Chevere\\Components\\Controller\\ControllerResponse;",
            "use Chevere\\Interfaces\\Controller\\ControllerResponseInterface;",
            "use Chevere\\Interfaces\\Controller\\ControllerArgumentsInterface;",
            "use Chevere\\Interfaces\\Controller\\ControllerParametersInterface;",
            "",
            "class $TM_FILENAME_BASE extends Controller",
            "{",
            "\tpublic function getDescription(): string",
            "\t{",
            "\t\treturn '${1:description}';",
            "\t}",
            "",
            "\tpublic function getParameters(): ControllerParametersInterface",
            "\t{",
            "\t\treturn ${2:new ControllerParameters}",
            "\t}",
            "",
            "\tpublic function run(ControllerArgumentsInterface \\$controllerArguments): ControllerResponseInterface",
            "\t{",
            "\t\treturn ${3:new ControllerResponse(true)};",
            "\t}",
            "}"
        ]
    },
    "controller-hookable": {
        "description": "Create a hookable controller",
        "prefix": "controller-hookable",
        "body": [
            "<?php",
            "",
            "use Chevere\\Components\\Controller\\Controller;",
            "use Chevere\\Components\\Controller\\ControllerParameters;",
            "use Chevere\\Components\\Controller\\ControllerResponse;",
            "use Chevere\\Components\\Plugin\\PluggableAnchors;",
            "use Chevere\\Components\\Plugs\\Hooks\\Traits\\PluggableHooksTrait;",
            "use Chevere\\Interfaces\\Controller\\ControllerArgumentsInterface;",
            "use Chevere\\Interfaces\\Controller\\ControllerParametersInterface;",
            "use Chevere\\Interfaces\\Controller\\ControllerResponseInterface;",
            "use Chevere\\Interfaces\\Plugin\\PluggableAnchorsInterface;",
            "use Chevere\\Interfaces\\Plugs\\Hooks\\PluggableHooksInterface;",
            "",
            "class $TM_FILENAME_BASE extends Controller implements PluggableHooksInterface",
            "{",
            "",
            "use PluggableHooksTrait;",
            "",
            "\tpublic static function getHookAnchors(): PluggableAnchorsInterface",
            "\t{",
            "\t\treturn ${1:new PluggableAnchors};",
            "\t}",
            "",
            "\tpublic function getDescription(): string",
            "\t{",
            "\t\treturn '${1:description}';",
            "\t}",
            "",
            "\tpublic function getParameters(): ControllerParametersInterface",
            "\t{",
            "\t\treturn ${2:new ControllerParameters}",
            "\t}",
            "",
            "\tpublic function run(ControllerArgumentsInterface \\$controllerArguments): ControllerResponseInterface",
            "\t{",
            "\t\treturn ${3:new ControllerResponse(true)};",
            "\t}",
            "}"
        ]
    },
    "hook-anchors": {
        "description": "Create getHookAnchors",
        "prefix": "hook-anchors",
        "body": [
            "use Chevere\\Components\\Plugin\\PluggableAnchors;",
            "use Chevere\\Interfaces\\Plugin\\PluggableAnchorsInterface;",
            "",
            "public static function getHookAnchors(): PluggableAnchorsInterface",
            "{",
            "\treturn ${1:new PluggableAnchors};",
            "}"
        ]
    },
    "hook": {
        "description": "Create hook",
        "prefix": "hook",
        "body": [
            "<?php",
            "",
            "use Chevere\\Interfaces\\Plugs\\Hooks\\HookInterface;",
            "",
            "final class $TM_FILENAME_BASE implements HookInterface",
            "{",
            "\tpublic function __invoke(&\\$argument): void",
            "\t{",
            "\t$0",
            "\t}",
            "",
            "\tpublic function anchor(): string",
            "\t{",
            "\t\treturn '${1:anchorName}';",
            "\t}",
            "",
            "\tpublic function at(): string",
            "\t{",
            "\t\treturn ${2:pluggable}::class;",
            "\t}",
            "",
            "\tpublic function priority(): int",
            "\t{",
            "\t\treturn ${3:0};",
            "\t}",
            "}"
        ]
    },
    "event": {
        "description": "Create event",
        "prefix": "event",
        "body": [
            "<?php",
            "",
            "use Chevere\\Interfaces\\Plugs\\EventListener\\EventListenerInterface;",
            "",
            "final class $TM_FILENAME_BASE implements EventListenerInterface",
            "{",
            "\tpublic function __invoke(array \\$data): void",
            "\t{",
            "\t$0",
            "\t}",
            "",
            "\tpublic function anchor(): string",
            "\t{",
            "\t\treturn '${1:anchorName}';",
            "\t}",
            "",
            "\tpublic function at(): string",
            "\t{",
            "\t\treturn ${2:pluggable}::class;",
            "\t}",
            "",
            "\tpublic function priority(): int",
            "\t{",
            "\t\treturn ${3:0};",
            "\t}",
            "}"
        ]
    },
    "docblock-construct": {
        "description": "Insert a docblock construct",
        "prefix": "docblock-construct",
        "body": ["/**", " * Does?", " */"]
    },
    "docblock-instance": {
        "description": "Insert a docblock instance",
        "prefix": "docblock-instance",
        "body": ["/**", " * Provides access to the ${1:name} instance.", " */"]
    },
    "docblock-immutable": {
        "description": "Insert a docblock immutable",
        "prefix": "docblock-immutable",
        "body": [
            "/**",
            " * Return an instance with the specified ${1:name}.",
            " *",
            " * This method MUST retain the state of the current instance, and return",
            " * an instance that contains the specified ${1:name}.",
            " */"
        ]
    },
    "docblock-boolean": {
        "description": "Insert a docblock boolean",
        "prefix": "docblock-boolean",
        "body": [
            "/**",
            " * Returns a boolean indicating whether the instance has a ${1:name}.",
            " */"
        ]
    }
}