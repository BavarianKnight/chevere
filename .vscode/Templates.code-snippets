{
    "interface": {
        "description": "Create an interface",
        "prefix": "interface",
        "body": [
            "<?php",
            "namespace Chevere\\Interfaces\\\\${TM_DIRECTORY/.*interfaces\\/(([^\\/]*)(\\/)?)|(\\/)([^\\/]*)/$2${3:+\\\\}${5:+\\\\}$5/g};",
            "",
            "/**",
            " * Describes the component in charge of ${1:doing}.",
            " */",
            "interface $TM_FILENAME_BASE",
            "{",
            "\t$0",
            "}"
        ]
    },
    "test": {
        "description": "Create a test",
        "prefix": "test",
        "body": [
            "<?php",
            "namespace Chevere\\Tests\\\\${TM_DIRECTORY/.*tests\\/(([^\\/]*)(\\/)?)|(\\/)([^\\/]*)/$2${3:+\\\\}${5:+\\\\}$5/g};",
            "",
            "use PHPUnit\\Framework\\TestCase;",
            "",
            "final class $TM_FILENAME_BASE extends TestCase",
            "{",
            "\t$0",
            "}"
        ]
    },
    "test-method": {
        "description": "Create a test method",
        "prefix": "test-method",
        "body": [
            "public function test${1:Name}(): void",
            "{",
            "\t$0",
            "}"
        ]
    },
    "immutable-method": {
        "description": "Create a immutable method",
        "prefix": "immutable-method",
        "body": [
            "private ${2|int,string,bool,array,object,resource|} \\$${3:argument};",
            "",
            "public function with${1:Name}(${2|int,string,bool,array,object,resource|} \\$${3:argument}): ${4:self}",
            "{",
            "\t\\$new = clone \\$this;",
            "\t\\$new->${3:argument} = \\$${3:argument};",
            "",
            "\treturn \\$new;",
            "}"
        ]
    },
    "component": {
        "description": "Create a component",
        "prefix": "component",
        "body": [
            "<?php",
            "namespace Chevere\\Components\\\\${TM_DIRECTORY/.*components\\/(([^\\/]*)(\\/)?)|(\\/)([^\\/]*)/$2${3:+\\\\}${5:+\\\\}$5/g};",
            "",
            "final class $TM_FILENAME_BASE",
            "{",
            "\t$0",
            "}"
        ]
    },
    "exception": {
        "description": "Create an exception",
        "prefix": "exception",
        "body": [
            "<?php",
            "namespace Chevere\\Exceptions\\\\${TM_DIRECTORY/.*exceptions\\/(([^\\/]*)(\\/)?)|(\\/)([^\\/]*)/$2${3:+\\\\}${5:+\\\\}$5/g};",
            "",
            "use Chevere\\Exceptions\\Core\\Exception;",
            "",
            "/**",
            " * Exception thrown when ${1:description}.",
            " */",
            "final class $TM_FILENAME_BASE extends Exception",
            "{",
            "}"
        ]
    },
    "trait": {
        "description": "Create a component trait",
        "prefix": "trait",
        "body": [
            "<?php",
            "namespace Chevere\\Components\\\\${TM_DIRECTORY/.*components\\/(([^\\/]*)(\\/)?)|(\\/)([^\\/]*)/$2${3:+\\\\}${5:+\\\\}$5/g};",
            "",
            "trait $TM_FILENAME_BASE",
            "{",
            "\t$0",
            "}"
        ]
    },
    "controller": {
        "description": "Create a controller",
        "prefix": "controller",
        "body": [
            "<?php",
            "",
            "use Chevere\\Components\\Controller\\Controller;",
            "use Chevere\\Components\\Controller\\ControllerParameters;",
            "use Chevere\\Components\\Controller\\ControllerResponse;",
            "use Chevere\\Interfaces\\Controller\\ControllerResponseInterface;",
            "use Chevere\\Interfaces\\Controller\\ControllerArgumentsInterface;",
            "use Chevere\\Interfaces\\Controller\\ControllerParametersInterface;",
            "",
            "class $TM_FILENAME_BASE extends Controller",
            "{",
            "\tpublic function getDescription(): string",
            "\t{",
            "\t\treturn '${1:description}';",
            "\t}",
            "",
            "\tpublic function getParameters(): ControllerParametersInterface",
            "\t{",
            "\t\treturn ${2:new ControllerParameters}",
            "\t}",
            "",
            "\tpublic function run(ControllerArgumentsInterface \\$controllerArguments): ControllerResponseInterface",
            "\t{",
            "\t\treturn ${3:new ControllerResponse(true, [])};",
            "\t}",
            "}"
        ]
    },
    "docblock-construct": {
        "description": "Insert a docblock construct",
        "prefix": "docblock-construct",
        "body": [
            "/**",
            " * Does?",
            " */"
        ]
    },
    "docblock-instance": {
        "description": "Insert a docblock instance",
        "prefix": "docblock-instance",
        "body": [
            "/**",
            " * Provides access to the ${1:name} instance.",
            " */"
        ]
    },
    "docblock-immutable": {
        "description": "Insert a docblock immutable",
        "prefix": "docblock-immutable",
        "body": [
            "/**",
            " * Return an instance with the specified ${1:name}.",
            " *",
            " * This method MUST retain the state of the current instance, and return",
            " * an instance that contains the specified ${1:name}.",
            " */"
        ]
    },
    "docblock-boolean": {
        "description": "Insert a docblock boolean",
        "prefix": "docblock-boolean",
        "body": [
            "/**",
            " * Indicates whether the instance has ${1:name}.",
            " */"
        ]
    },
    "docblock-interface": {
        "description": "Insert a docblock interface",
        "prefix": "docblock-interface",
        "body": [
            "/**",
            " * Describes the component in charge of ${1:doing}.",
            " */"
        ]
    },
    "coverage-ignore": {
        "description": "Insert a code coverage ignore tag",
        "prefix": "cov-ignore",
        "body": [
            "@codeCoverageIgnore"
        ]
    },
    "coverage-ignore-start": {
        "description": "Insert a code coverage ignore start tag",
        "prefix": "cov-ignore-start",
        "body": [
            "@codeCoverageIgnoreStart"
        ]
    },
    "coverage-ignore-end": {
        "description": "Insert a code coverage ignore end tag",
        "prefix": "cov-ignore-end",
        "body": [
            "@codeCoverageIgnoreEnd"
        ]
    },
}